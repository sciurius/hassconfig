# emsgw.yaml            EMS-ESP gateway         -*-hass-*-

input_number:

  # To store the wind chill factor once an hour.
  emsgw_chill:
    name: Chill Factor
    min: -50
    max: 50
    step: 1
    mode: box
    unit_of_measurement: "°C"

input_boolean:

  # To register return temp high status
  emsgw_return_temp_high:
    icon: mdi:thermometer-alert

template:

  - sensor:

      # This is mainly to show the current settings in a dashboard.
      - name: Boiler HeatingTemp
        unique_id: boiler_heatingtemp
        state: "{{ states('number.boiler_heatingtemp')|round(1) }}"
        unit_of_measurement: "°C"
        icon: mdi:car-cruise-control

      - name: Thermostat Temperature
        unique_id: thermostat_temperature
        state: "{{ state_attr('climate.thermostat_hc1','current_temperature') }}"
        unit_of_measurement: "°C"
        icon: mdi:thermometer
        
      - name: Thermostat Setting
        unique_id: thermostat_setting
        state: "{{ state_attr('climate.thermostat_hc1','temperature') }}"
        unit_of_measurement: "°C"
        icon: mdi:thermometer

      - name: 'Boiler Status Text'
        unique_id: boiler_status_text
        state: >
          {% set sc = states('sensor.boiler_servicecodenumber') %}
          {% if sc == '200' %} CH active
          {% elif sc == '201' %} HW active
          {% elif sc == '202' %} CH anti cycle
          {% elif sc == '203' %} Standby
          {% elif sc == '204' %} CH cooling
          {% elif sc == '208' %} Service test
          {% elif sc == '265' %} Low CH load
          {% elif sc == '268' %} Component test
          {% elif sc == '270' %} Power up
          {% elif sc == '283' %} Burner start
          {% elif sc == '284' %} Ignition
          {% elif sc == '305' %} HW anti cycle
          {% elif sc == '357' %} Air purge
          {% elif sc == '358' %} Valve kick
          {% else %} {{ sc }}
          {% endif %}
  
      - name: Thermostat Vacation 1
        unique_id: thermostat_vacation_1
        state: "{{ states('text.thermostat_hc1_vacations1') }}"
        icon: mdi:calendar-month-outline

      - name: Thermostat Vacation 2
        unique_id: thermostat_vacation_2
        state: "{{ states('text.thermostat_hc1_vacations2') }}"
        icon: mdi:calendar-month-outline

      - name: Thermostat Vacation 3
        unique_id: thermostat_vacation_3
        state: "{{ states('text.thermostat_hc1_vacations3') }}"
        icon: mdi:calendar-month-outline

      - name: Thermostat Vacation 4
        unique_id: thermostat_vacation_4
        state: "{{ states('text.thermostat_hc1_vacations4') }}"
        icon: mdi:calendar-month-outline

      - name: Thermostat Vacation 5
        unique_id: thermostat_vacation_5
        state: "{{ states('text.thermostat_hc1_vacations5') }}"
        icon: mdi:calendar-month-outline

      - name: Thermostat Vacation 6
        unique_id: thermostat_vacation_6
        state: "{{ states('text.thermostat_hc1_vacations6') }}"
        icon: mdi:calendar-month-outline

      - name: Thermostat Vacation 7
        unique_id: thermostat_vacation_7
        state: "{{ states('text.thermostat_hc1_vacations7') }}"
        icon: mdi:calendar-month-outline

      - name: Thermostat Party Time
        unique_id: thermostat_party_time
        state: "{{ states('number.thermostat_hc1_party') }}"
        icon: mdi:timelapse
        unit_of_measurement: h

      - name: Thermostat Pause Time
        unique_id: thermostat_pause_time
        state: "{{ states('number.thermostat_hc1_pause') }}"
        icon: mdi:timelapse
        unit_of_measurement: h

  - binary_sensor:

      - name: Radiatorfans
        unique_id: radiatorfans
#        state: "{{ has_value('sensor.tasm02_wifi_connect_count') }}"
        state: "{{ is_state('switch.radiatorfans','on') }}"

sensor:

  # Average wind chill over the last hour.
  - platform: statistics
    name: EMSGW Average Wind Chill
    entity_id: sensor.bresser51_wind_chill
    state_characteristic: average_step
    sampling_size: 300
    max_age:
      hours: 1

automation:

  - id: Automation__CV_Pressure_Notification
    alias: CV Pressure Notification
    description: "Send alarm when pressure is getting low."
    mode: single

    trigger:
      - platform: numeric_state
        entity_id: sensor.boiler_syspress
        below: '0.85'
        for:
          hours: 0
          minutes: 10
          seconds: 0

    condition: []

    action:
      - service: notify.notify
        data:
          message: CV Pressure low!
      - service: telegram_bot.send_message
        data:
          message: CV Pressure low!

  - alias: EMSGW Save Wind Chill
    description: "Copies the chill factor to the helper."
    mode: single

    # Trigger every hour, at 7 minutes past.
    trigger:
      - platform: time_pattern
        minutes: 7

    condition: |-
      {{ states('sensor.emsgw_average_wind_chill')
         not in ( 'unavailable', 'unknown' ) }}

    action:
      service: input_number.set_value
      target:
        entity_id: input_number.emsgw_chill
      data:
        value: "{{ states('sensor.emsgw_average_wind_chill') }}"

  - alias: EMSGW Check Wind Chill
    description: "Checks (change in) wind chill and adjusts the CV capacity."
    mode: single

    variables:
      threshold: 10
      burner_low: 45
      burner_high: 70

    trigger:
      - platform: state
        entity_id: input_number.emsgw_chill

    action:

      - choose:

          # Low.
          - conditions: >-
              {{     trigger.from_state.state|round(0) <= threshold
                 and trigger.to_state.state  |round(0) <= threshold
                 and
                 states('sensor.boiler_heatingtemperature')|round(0) < burner_high
              }}

            sequence:
              - service: mqtt.publish
                data:
                  topic: ems-esp/boiler/heatingtemp
                  payload: "{{ burner_high }}"
              - service: telegram_bot.send_message
                data:
                  message: >-
                    CV: Chill {{ trigger.to_state.state|round(1) }},
                    threshold {{ threshold }},
                    heating set to {{ burner_high }}

          # High.
          - conditions: >-
              {{     trigger.from_state.state|round(0) > threshold
                 and trigger.to_state.state  |round(0) > threshold
                 and
                 states('sensor.boiler_heatingtemperature')|round(0) > burner_low
              }}

            sequence:
              - service: mqtt.publish
                data:
                  topic: ems-esp/boiler/heatingtemp
                  payload: "{{ burner_low }}"
              - service: telegram_bot.send_message
                data:
                  message: >-
                    CV: Chill {{ trigger.to_state.state|round(1) }},
                    threshold {{ threshold }},
                    heating set to {{ burner_low }}

  - alias: EMSGW Check Return Temperature Up
    description: Check return temp. Must be below 55.
    mode: single

    trigger:
      - platform: numeric_state
        id: too_high
        entity_id: sensor.boiler_rettemp
        above: 55
        for: "00:05:00"

    condition: >
      {{ is_state('input_boolean.emsgw_return_temp_high','off')
         and
         states('sensor.boiler_wwcurflow')|float <= 0
      }}
      
    action:
      - service: telegram_bot.send_message
        data:
          message: >-
            CV: Return temperature
            {% if trigger.id == "too_high" %} too high:
            {% else %} OK again:
            {% endif %}
            {{ trigger.to_state.state|round(1) }}
            °C
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.emsgw_return_temp_high

  - alias: EMSGW Check Return Temperature Down
    description: Check return temp. Must be below 55.
    mode: single

    trigger:
      - platform: numeric_state
        id: ok_again
        entity_id: sensor.boiler_rettemp
        below: 55
        for: "00:05:00"

    condition: "{{ is_state('input_boolean.emsgw_return_temp_high','on') }}"

    action:
      - service: telegram_bot.send_message
        data:
          message: >-
            CV: Return temperature
            {% if trigger.id == "too_high" %} too high:
            {% else %} OK again:
            {% endif %}
            {{ trigger.to_state.state|round(1) }}
            °C
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.emsgw_return_temp_high

  # - alias: EMSGW Check Return Temperature
  #   description: Check return temp. Must be below 55.
  #   mode: single
  #
  #   trigger:
  #     - platform: numeric_state
  #       id: too_high
  #       entity_id: sensor.boiler_rettemp
  #       above: 55
  #       for: "00:05:00"
  #     - platform: numeric_state
  #       id: ok_again
  #       entity_id: sensor.boiler_rettemp
  #       below: 55
  #       for: "00:05:00"
  #
  #   action:
  #     - service: telegram_bot.send_message
  #       data:
  #         message: >-
  #           CV: Return temperature
  #           {% if trigger.id == "too_high" %} too high:
  #           {% else %} OK again:
  #           {% endif %}
  #           {{ trigger.to_state.state|round(1) }}
  #           °C

  - id: Automation__CV_Shower_Notification
    alias: CV Shower Notification
    description: "Send message shower complete."
    mode: single

    trigger:
      - platform: state
        entity_id: sensor.ems_esp_shower_duration

    action:
      - service: telegram_bot.send_message
        data:
          message: >
            Shower: {{
            as_timestamp(states('sensor.ems_esp_shower_timestamp')) 
            | timestamp_custom('%-d %b %-H:%M') }} -- {{
            states('sensor.ems_esp_shower_duration')|int
            | timestamp_custom('%-M\'%S"') }}

  - id: Automation__CV_RadiatorFans
    alias: CV Radiatorfans
    description: "Turn radiator fans on."
    mode: single

    trigger:
      - platform: state
        entity_id: binary_sensor.boiler_heatingactive
        to: "on"

    action:
      - service_template: 'switch.turn_{{trigger.to_state.state}}'
        entity_id: switch.radiatorfans

